//+------------------------------------------------------------------+
//|                                                      GBPUSD_EA.mq5|
//|                        Copyright 2024, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "2024, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"
#property strict

#include <Trade\Trade.mqh> // Include the Trade class

input double TakeProfit = 10;
input double StopLoss = 30;
input double LotSize = 0.1;
input int InitialCandles = 7; // Number of initial candles to consider

CTrade trade; // Create an instance of CTrade

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   EventSetTimer(60); // Set timer to call OnTick every minute
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   EventKillTimer(); // Kill the timer on deinitialization
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   static bool isOrderPlaced = false;
   datetime dayStart = iTime(_Symbol, PERIOD_D1, 0);
   
   if (TimeCurrent() > dayStart && TimeCurrent() < dayStart + InitialCandles * 3600)
     {
      if (!isOrderPlaced)
        {
         double highestHigh = -DBL_MAX;
         double lowestLow = DBL_MAX;
         
         for (int i = 0; i < InitialCandles; i++)
           {
            double high = iHigh(_Symbol, PERIOD_H1, i);
            double low = iLow(_Symbol, PERIOD_H1, i);
            if (high > highestHigh)
               highestHigh = high;
            if (low < lowestLow)
               lowestLow = low;
           }
         
         double buyStopPrice = highestHigh + 10 * _Point;
         double sellStopPrice = lowestLow - 10 * _Point;
         
         // Open Buy Stop order
         if (trade.BuyStop(LotSize, buyStopPrice, NULL, StopLoss * _Point, TakeProfit * _Point, NULL))
            Print("Buy Stop order placed successfully.");
         else
            Print("Error placing Buy Stop order: ", GetLastError());
         
         // Open Sell Stop order
         if (trade.SellStop(LotSize, sellStopPrice, NULL, StopLoss * _Point, TakeProfit * _Point, NULL))
            Print("Sell Stop order placed successfully.");
         else
            Print("Error placing Sell Stop order: ", GetLastError());

         isOrderPlaced = true;
        }
     }
   else if (TimeCurrent() > dayStart + 24 * 3600 - 60)
     {
      // Reset order placement flag at the end of the day
      isOrderPlaced = false;
     }
   else
     {
      CheckForClose();
     }
  }
//+------------------------------------------------------------------+
//| Check if one position is closed and close the other one          |
//+------------------------------------------------------------------+
void CheckForClose()
  {
   for (int i = PositionsTotal() - 1; i >= 0; i--)
     {
      if (PositionSelect(PositionGetSymbol(i)))
        {
         double profit = PositionGetDouble(POSITION_PROFIT);
         if (profit != 0)
           {
            // Close all positions
            for (int j = PositionsTotal() - 1; j >= 0; j--)
              {
               ulong ticket = PositionGetTicket(j);
               trade.PositionClose(ticket);
              }
            break;
           }
        }
     }
  }
//+------------------------------------------------------------------+
